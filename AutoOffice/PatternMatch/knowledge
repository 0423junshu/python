什么是正则表达式
正则表达式是一种用于匹配字符串中特定模式的工具。它是一个字符序列，通过使用各种字符类、元字符和限定符等，可以精确地描述要在文本中查找或匹配的内容。例如，你可以使用正则表达式来查找电子邮件地址、电话号码、网页链接等特定格式的文本内容。
基本字符匹配
普通字符：普通字符在正则表达式中会按照字面意思进行匹配。例如，在正则表达式abc中，它会匹配字符串中连续出现的abc这三个字符。
元字符：
.（点）：匹配除换行符\n之外的任意一个字符。例如，a.c可以匹配abc、a1c、a c等。
\d：匹配一个数字，等价于[0 - 9]。例如，\d\d可以匹配12、34等两位数字。
\D：匹配一个非数字字符，与\d相反。例如，\D\D可以匹配ab、##等。
\w：匹配一个字母、数字或下划线，等价于[a - zA - Z0 - 9_]。例如，\w\w可以匹配ab、a1、_a等。
\W：匹配一个非字母、数字和下划线的字符，与\w相反。例如，\W\W可以匹配##、$$等。
\s：匹配一个空白字符，包括空格、制表符（\t）、换行符（\n）等。例如，a\sb可以匹配a b（中间是一个空格）。
\S：匹配一个非空白字符，与\s相反。
字符类和字符组
方括号[]：用于定义字符类。例如，[abc]表示匹配a、b或者c这三个字符中的任意一个。[a - z]表示匹配从a到z的任意一个小写字母。
取反字符类：在方括号内的第一个字符如果是^，则表示取反。例如，[^abc]表示匹配除a、b、c之外的任意一个字符。
限定符
*（星号）：匹配前面的元素零次或多次。例如，a*可以匹配空字符串、a、aa、aaa等。
+（加号）：匹配前面的元素一次或多次。例如，a+可以匹配a、aa、aaa等，但不能匹配空字符串。
?（问号）：匹配前面的元素零次或一次。例如，a?可以匹配空字符串或者a。
{n}：匹配前面的元素恰好n次。例如，a{3}可以匹配aaa。
{n,}：匹配前面的元素至少n次。例如，a{2,}可以匹配aa、aaa、aaaa等。
{n,m}：匹配前面的元素至少n次且最多m次。例如，a{1,3}可以匹配a、aa、aaa。
分组和引用
括号()：用于分组。例如，(abc)+表示abc这个组作为一个整体，匹配一次或多次。分组还可以用于提取匹配的子字符串。例如，在re.findall操作中，使用(abc)作为模式，可以提取出字符串中所有abc的子串。
后向引用：可以使用\1、\2等形式来引用前面分组匹配的内容。例如，(\d)\1表示匹配两个相同的数字，如11、22等。
边界匹配符
^（脱字符）：在字符类[]之外，用于匹配字符串的开头。例如，^abc表示匹配以abc开头的字符串。
$（美元符号）：用于匹配字符串的结尾。例如，abc$表示匹配以abc结尾的字符串。
贪婪匹配和非贪婪匹配
贪婪匹配是正则表达式默认的匹配方式。例如，在匹配a.*b时，它会尽可能多地匹配字符，从a开始一直到最后一个b。
非贪婪匹配可以通过在限定符后添加?来实现。例如，a.*?b会尽可能少地匹配字符，从a开始，只要遇到第一个b就停止匹配。